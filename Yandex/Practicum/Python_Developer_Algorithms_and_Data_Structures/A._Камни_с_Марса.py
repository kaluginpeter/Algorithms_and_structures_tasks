# A. Камни с Марса
# Ограничение времени	1 секунда
# Ограничение памяти	64.0 Мб
# Ввод	стандартный ввод или input.txt
# Вывод	стандартный вывод или output.txt
# При отправке марсианской миссии множество научных лабораторий и музеев сделали заказы на доставку образцов марсианских горных пород.
#
# В каждом заказе обозначен минимальный вес требуемого образца: заказчик готов получить образец указанного веса или тяжелее, но никак не меньше.
#
# Марсианские булыжники были доставлены на Землю, но ни их количество, ни вес не соответствуют заказам в точности:
#
# 8 5 5 8 6 9 8 2 4 7   # Заказано 10 образцов;
#                       # каждый элемент - вес заказанного образца.
#
# 9 8 1 1 1 5 10 8      # Доставлено 8 образцов;
#                       # каждый элемент - вес доставленного образца.
# Ваша задача: написать программу, которая распределит образцы между заказчиками оптимальным образом — так, чтобы выполнить требования максимального числа заказчиков.
#
# Требование заказчика считается выполненным, если он получит образец, вес которого равен заказанному или превышает заказанный вес.
#
# Программа должна вернуть число заказчиков, которые получили образцы, соответствующие их требованиям.
#
# 8 5 5 8 6 9 8 2 4 7   # Заказано.
# 9 8 1 1 1 5 10 8      # Доставлено.
#
# 8 5 5 8  6 9 8 2 4 7  # Доставленные образцы, распределённые между заказчиками
# | | | |  |            # (один из возможных вариантов).
# 9 8 5 10 8            # Три образца весом 1 кг остались невостребованными.
#
# # Результат (число заказчиков, получивших желаемое):
# 5
# Булыжники нельзя дробить на части, а каждый заказчик может получить только по одному образцу.
#
# Формат ввода
# В первой строке записано число n — количество заказов от музеев и лабораторий. Это количество не превышает 10 000.
#
# Во второй строке — n чисел, разделённых пробелом. Каждое число — это минимальный вес образца, который требуется заказчику. Это натуральные числа, не превосходящие 1000.
#
# В третьей строке записано число m — количество образцов, доставленных с Марса. Это количество не превышает 10 000.
#
# В четвёртой строке — m чисел: это вес каждого из доставленных образцов; значения в этой строке не превышают 1000.
#
# Формат вывода
# Нужно вывести одно число — количество заказчиков, требования которых удовлетворены.
#
# Пример 1
# Ввод	Вывод
# 10
# 8 5 5 8 6 9 8 2 4 7
# 8
# 9 8 1 1 1 5 10 8
# 5
# Пример 2
# Ввод	Вывод
# 10
# 8 2 4 7 8 5 5 8 6 9
# 13
# 9 8 1 1 1 5 10 8 2 7 4 3 15
# 9
# Solution Greedy Time O(NlogN) Memory O(1)
import sys

def parse_input() -> tuple[int, list[int], int, list[int]]:
    n: int = int(sys.stdin.readline().rstrip())
    list_n: list[int] = list(map(int, sys.stdin.readline().rstrip().split()))
    m: int = int(sys.stdin.readline().rstrip())
    list_m: list[int] = list(map(int, sys.stdin.readline().rstrip().split()))
    return n, list_n, m, list_m


def maximum_correct_stones(len_correct: int, correct: list[int], len_shipped: int, shipped: list[int]) -> int:
    correct.sort()
    shipped.sort()
    answer: int = 0
    idx_correct = idx_shipped = 0
    while idx_correct < len_correct and idx_shipped < len_shipped:
        while idx_shipped < len_shipped and correct[idx_correct] > shipped[idx_shipped]:
            idx_shipped += 1
        if idx_shipped < len_shipped:
            answer += 1
            idx_correct, idx_shipped = idx_correct + 1, idx_shipped + 1
        else: break
    return answer


def print_answer(answer: int) -> None:
    sys.stdout.write(str(answer))


def solution() -> None:
    n, list_n, m, list_m = parse_input()
    answer: int = maximum_correct_stones(n, list_n, m, list_m)
    print_answer(answer)


if __name__ == '__main__':
    solution()