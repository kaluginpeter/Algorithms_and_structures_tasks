# A. Количество чисел, меньших, чем заданное
# Ограничение времени	1 секунда
# Ограничение памяти	64.0 Мб
# Ввод	стандартный ввод или input.txt
# Вывод	стандартный вывод или output.txt
# Марсоход раз в час записывает в массив информацию о солнечной радиации. Каждое значение — это число от 0 до 100.
#
# Для каждого элемента требуется определить, сколько в массиве есть значений меньше, чем текущее. Результат нужно записать во второй массив.
#
# Исходные массивы могут быть длиной от 2 до 500 элементов.
#
# Например, исходный массив — nums = [8, 1, 2, 2, 3].
#
# Берём первое значение массива, это 8. Сравниваем это число с остальными: считаем, сколько в массиве есть чисел, меньших, чем выбранное. В этом массиве четыре числа, меньших, чем 8. Создаём массив result, записываем в него 4.
#
# Точно так же проверяем второе значение в исходном массиве, это единица. В исходном массиве нет ни одного числа, меньшего, чем 1. В массив result записываем второе значение: 0.
#
# Проверяем третье значение в массиве nums, это 2. Есть только одно значение, меньшее, чем 2. В массив result записываем третье значение — 1.
#
# Таким же образом проверяем все остальные значения в nums.
#
# В итоге для входного массива [8, 1, 2, 2, 3] получится результирующий массив [4, 0, 1, 1, 3].
#
# Решить задачу можно любым образом, пусть даже не самым эффективным. Решение за квадратичное время вполне подойдёт.
#
# Если останутся время и силы, попробуйте найти решение с временной сложностью О(n log n), такое тоже есть.
#
# Формат ввода
# Массив целых чисел, записанных через пробел, — показатели радиации.
#
# Формат вывода
# Массив целых чисел, записанных через пробел, где каждое число — это количество чисел в исходном массиве, меньших, чем рассматриваемое.
#
# Пример 1
# Ввод	Вывод
# 6 5 4 8
# 2 1 0 3
# Пример 2
# Ввод	Вывод
# 7 7 7 7
# 0 0 0 0
# Пример 3
# Ввод	Вывод
# 1 7 3 7 6
# 0 3 1 3 2
# Solution Binary Search Leftmost Sorting Time O(NlogN) Memory O(N)
import sys


def parse_input() -> list[int]:
    output: list[int] = list(map(int, sys.stdin.readline().rstrip().split()))
    return output


def get_index_of_item(sequence: list[int], target: int) -> int:
    left, right = 0, len(sequence)
    while left <= right:
        middle: int = (left + right) >> 1
        if sequence[middle] >= target:
            right = middle - 1
        else:
            left = middle + 1
    return right + 1


def calculate_sequence(sequence: list[int]) -> list[int]:
    output: list[int] = list()
    ordered_sequence: list[int] = sorted(sequence)
    for item in sequence:
        idx: int = get_index_of_item(ordered_sequence, item)
        output.append(max(idx, 0))
    return output


def print_answer(answer: list[int]) -> None:
    print(' '.join(str(item) for item in answer))


def solution() -> None:
    sequence: list[int] = parse_input()
    answer: list[int] = calculate_sequence(sequence)
    print_answer(answer)


if __name__ == '__main__':
    solution()